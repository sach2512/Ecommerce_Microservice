// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderService.Infrastructure.Persistence;

#nullable disable

namespace OrderService.Infrastructure.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20250804013531_Mig1")]
    partial class Mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderService.Domain.Entities.Cancellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CancellationCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CancellationPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("CancellationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PurchaseTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal?>("TotalRefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CancellationPolicyId");

                    b.HasIndex("CancellationStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReasonId");

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.CancellationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CancellationCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CancellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CancellationId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("CancellationItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.CancellationPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowedCancellationDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PenaltyPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("CancellationPolicies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowedCancellationDays = 3,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cancellations allowed before shipment only",
                            IsActive = true,
                            PenaltyPercentage = 10m,
                            PolicyName = "Standard Cancellation Policy"
                        },
                        new
                        {
                            Id = 2,
                            AllowedCancellationDays = 0,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "No cancellations allowed once order is shipped",
                            IsActive = true,
                            PenaltyPercentage = 100m,
                            PolicyName = "No Cancellation After Shipment"
                        },
                        new
                        {
                            Id = 3,
                            AllowedCancellationDays = 1,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cancellations allowed up to 24 hours before delivery",
                            IsActive = true,
                            PenaltyPercentage = 5m,
                            PolicyName = "Flexible Cancellation"
                        },
                        new
                        {
                            Id = 4,
                            AllowedCancellationDays = 0,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "No cancellations or returns allowed on final sale items",
                            IsActive = true,
                            PenaltyPercentage = 100m,
                            PolicyName = "No Cancellation - Final Sale"
                        },
                        new
                        {
                            Id = 5,
                            AllowedCancellationDays = 3,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Partial cancellation allowed before shipment with 15% penalty",
                            IsActive = true,
                            PenaltyPercentage = 15m,
                            PolicyName = "Partial Cancellation Allowed"
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.CancellationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CancellationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cancellation requested",
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cancellation approved",
                            StatusName = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cancellation rejected",
                            StatusName = "Rejected"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Refund has been processed",
                            StatusName = "Refunded"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Partial refund has been processed",
                            StatusName = "PartiallyRefunded"
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("DiscountType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "10% off on all products",
                            DiscountName = "New Year 10% Off",
                            DiscountPercentage = 10m,
                            DiscountType = 2,
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MinimumAmount = 500m,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Flat $50 off on orders above $1000",
                            DiscountAmount = 50m,
                            DiscountName = "Flat $50 Off",
                            DiscountType = 1,
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MinimumAmount = 1000m,
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Save 15% on all summer collection",
                            DiscountName = "Summer Sale 15% Off",
                            DiscountPercentage = 15m,
                            DiscountType = 2,
                            EndDate = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MinimumAmount = 0m,
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Buy two items and get one free on select products",
                            DiscountName = "Buy 2 Get 1 Free",
                            DiscountPercentage = 0m,
                            DiscountType = 1,
                            EndDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MinimumAmount = 0m,
                            StartDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Flat 20% discount on orders above $1500 during festive season",
                            DiscountName = "Festive Season Flat 20% Off",
                            DiscountPercentage = 20m,
                            DiscountType = 2,
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MinimumAmount = 1500m,
                            StartDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Up to 30% off on clearance items",
                            DiscountName = "Clearance Sale 30% Off",
                            DiscountPercentage = 30m,
                            DiscountType = 2,
                            EndDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MinimumAmount = 0m,
                            StartDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "$25 off on first order above $100",
                            DiscountAmount = 25m,
                            DiscountName = "New Customer $25 Off",
                            DiscountType = 1,
                            EndDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MinimumAmount = 100m,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InvoicePdfUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CancellationPolicyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReturnPolicyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ShippingCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SubTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CancellationPolicyId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ReturnPolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemStatusId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Order has been placed but not yet confirmed",
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Order has been confirmed",
                            StatusName = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Order has been packed",
                            StatusName = "Packed"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Order has been shipped",
                            StatusName = "Shipped"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Order has been delivered",
                            StatusName = "Delivered"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Order has been cancelled",
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Order has been partiallly cancelled",
                            StatusName = "PartialCancelled"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Order has been returned",
                            StatusName = "Returned"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Order has been partiallly returned",
                            StatusName = "PartialReturned"
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NewStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OldStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("OldStatusId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderStatusHistories");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ReasonMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReasonText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReasonType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReasonMasters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ReasonText = "Ordered by mistake",
                            ReasonType = "Cancellation"
                        },
                        new
                        {
                            Id = 2,
                            ReasonText = "Found better price elsewhere",
                            ReasonType = "Cancellation"
                        },
                        new
                        {
                            Id = 3,
                            ReasonText = "Shipping took too long",
                            ReasonType = "Cancellation"
                        },
                        new
                        {
                            Id = 4,
                            ReasonText = "Changed my mind",
                            ReasonType = "Cancellation"
                        },
                        new
                        {
                            Id = 5,
                            ReasonText = "Item no longer needed",
                            ReasonType = "Cancellation"
                        },
                        new
                        {
                            Id = 6,
                            ReasonText = "Payment issues",
                            ReasonType = "Cancellation"
                        },
                        new
                        {
                            Id = 7,
                            ReasonText = "Product defective",
                            ReasonType = "Return"
                        },
                        new
                        {
                            Id = 8,
                            ReasonText = "Product not as described",
                            ReasonType = "Return"
                        },
                        new
                        {
                            Id = 9,
                            ReasonText = "Wrong item delivered",
                            ReasonType = "Return"
                        },
                        new
                        {
                            Id = 10,
                            ReasonText = "Damaged during shipping",
                            ReasonType = "Return"
                        },
                        new
                        {
                            Id = 11,
                            ReasonText = "Missing parts or accessories",
                            ReasonType = "Return"
                        },
                        new
                        {
                            Id = 12,
                            ReasonText = "Product expired or near expiry",
                            ReasonType = "Return"
                        },
                        new
                        {
                            Id = 13,
                            ReasonText = "Received extra item",
                            ReasonType = "Return"
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Refund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CancellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RefundStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReturnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CancellationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RefundStatusId");

                    b.HasIndex("ReturnId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.RefundStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RefundStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Refund requested but not yet processed",
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Refund is being processed",
                            StatusName = "Processing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Refund completed successfully",
                            StatusName = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Refund failed",
                            StatusName = "Failed"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Refund request cancelled",
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Return", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchaseTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RestockingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReturnPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("ReturnStatusId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalRefundableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("ReturnPolicyId");

                    b.HasIndex("ReturnStatusId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ReturnItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("RestockingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ReturnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ReturnId");

                    b.ToTable("ReturnItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ReturnPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowedReturnDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("RestockingFee")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("ReturnPolicies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowedReturnDays = 7,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Returns accepted within 7 days",
                            IsActive = true,
                            PolicyName = "Standard Return Policy",
                            RestockingFee = 5m
                        },
                        new
                        {
                            Id = 2,
                            AllowedReturnDays = 3,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Returns only allowed within 3 days",
                            IsActive = true,
                            PolicyName = "No Returns After 3 Days",
                            RestockingFee = 0m
                        },
                        new
                        {
                            Id = 3,
                            AllowedReturnDays = 30,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Returns accepted within 30 days for electronics",
                            IsActive = true,
                            PolicyName = "Extended Return Policy",
                            RestockingFee = 10m
                        },
                        new
                        {
                            Id = 4,
                            AllowedReturnDays = 0,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "No returns allowed on clearance and discount items",
                            IsActive = true,
                            PolicyName = "No Returns on Clearance",
                            RestockingFee = 0m
                        },
                        new
                        {
                            Id = 5,
                            AllowedReturnDays = 15,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Returns allowed only if exchanged within 15 days",
                            IsActive = true,
                            PolicyName = "Return with Exchange Only",
                            RestockingFee = 5m
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ReturnStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ReturnStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Return requested",
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Return approved",
                            StatusName = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Returned item received",
                            StatusName = "ItemReceived"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Returned item inspected",
                            StatusName = "Inspected"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Refund processed",
                            StatusName = "Refunded"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Return rejected",
                            StatusName = "Rejected"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Return completed",
                            StatusName = "Completed"
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarrierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ShipmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipmentStatusId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ShipmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityShipped")
                        .HasColumnType("int");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ShipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShipmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Shipment is created but not yet dispatched",
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Shipment has been shipped from warehouse",
                            StatusName = "Shipped"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Shipment is currently in transit",
                            StatusName = "InTransit"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Shipment is out for delivery with courier",
                            StatusName = "OutForDelivery"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Shipment has been delivered to customer",
                            StatusName = "Delivered"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Shipment has been returned to sender",
                            StatusName = "Returned"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Shipment was cancelled",
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ShipmentStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OldStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("OldStatusId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentStatusHistories");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AppliesToProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("AppliesToShipping")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliesToProduct = true,
                            AppliesToShipping = false,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Central GST",
                            IsActive = true,
                            TaxName = "CGST",
                            TaxPercentage = 9m,
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AppliesToProduct = true,
                            AppliesToShipping = false,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "State GST",
                            IsActive = true,
                            TaxName = "SGST",
                            TaxPercentage = 9m,
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AppliesToProduct = false,
                            AppliesToShipping = true,
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tax on shipping charges",
                            IsActive = true,
                            TaxName = "Shipping Tax",
                            TaxPercentage = 5m,
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Cancellation", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.CancellationPolicy", "Policy")
                        .WithMany()
                        .HasForeignKey("CancellationPolicyId");

                    b.HasOne("OrderService.Domain.Entities.CancellationStatus", "CancellationStatus")
                        .WithMany()
                        .HasForeignKey("CancellationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.Order", "Order")
                        .WithMany("OrderCancellations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.ReasonMaster", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancellationStatus");

                    b.Navigation("Order");

                    b.Navigation("Policy");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.CancellationItem", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.Cancellation", "Cancellation")
                        .WithMany("CancellationItems")
                        .HasForeignKey("CancellationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cancellation");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("OrderService.Domain.Entities.Invoice", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Order", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.CancellationPolicy", "CancellationPolicy")
                        .WithMany()
                        .HasForeignKey("CancellationPolicyId");

                    b.HasOne("OrderService.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.ReturnPolicy", "ReturnPolicy")
                        .WithMany()
                        .HasForeignKey("ReturnPolicyId");

                    b.Navigation("CancellationPolicy");

                    b.Navigation("OrderStatus");

                    b.Navigation("ReturnPolicy");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.OrderStatus", "OrderItemStatus")
                        .WithMany()
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderItemStatus");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.OrderStatus", "NewStatus")
                        .WithMany()
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.OrderStatus", "OldStatus")
                        .WithMany()
                        .HasForeignKey("OldStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewStatus");

                    b.Navigation("OldStatus");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Refund", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.Cancellation", "Cancellation")
                        .WithMany()
                        .HasForeignKey("CancellationId");

                    b.HasOne("OrderService.Domain.Entities.Order", "Order")
                        .WithMany("Refunds")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.RefundStatus", "RefundStatus")
                        .WithMany()
                        .HasForeignKey("RefundStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.Return", "Return")
                        .WithMany()
                        .HasForeignKey("ReturnId");

                    b.Navigation("Cancellation");

                    b.Navigation("Order");

                    b.Navigation("RefundStatus");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Return", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.Order", "Order")
                        .WithMany("OrderReturns")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.ReasonMaster", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.ReturnPolicy", "Policy")
                        .WithMany()
                        .HasForeignKey("ReturnPolicyId");

                    b.HasOne("OrderService.Domain.Entities.ReturnStatus", "ReturnStatus")
                        .WithMany()
                        .HasForeignKey("ReturnStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Policy");

                    b.Navigation("Reason");

                    b.Navigation("ReturnStatus");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ReturnItem", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.Return", "Return")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.Order", "Order")
                        .WithMany("Logistics")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.ShipmentStatus", "ShipmentStatus")
                        .WithMany()
                        .HasForeignKey("ShipmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ShipmentStatus");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ShipmentItem", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.ShipmentStatusHistory", b =>
                {
                    b.HasOne("OrderService.Domain.Entities.ShipmentStatus", "NewShipmentStatus")
                        .WithMany()
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.ShipmentStatus", "OldShipmentStatus")
                        .WithMany()
                        .HasForeignKey("OldStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Entities.Shipment", "Shipment")
                        .WithMany("ShipmentStatusHistories")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewShipmentStatus");

                    b.Navigation("OldShipmentStatus");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Cancellation", b =>
                {
                    b.Navigation("CancellationItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Order", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("Logistics");

                    b.Navigation("OrderCancellations");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderReturns");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Return", b =>
                {
                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("OrderService.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("ShipmentItems");

                    b.Navigation("ShipmentStatusHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
