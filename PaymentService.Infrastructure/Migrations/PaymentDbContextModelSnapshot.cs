// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentService.Infrastructure.Persistence;

#nullable disable

namespace PaymentService.Infrastructure.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    partial class PaymentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PaymentService.Domain.Entities.GatewayResponse", b =>
                {
                    b.Property<Guid>("GatewayResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RefundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GatewayResponseId");

                    b.HasIndex(new[] { "PaymentId" }, "IX_GatewayResponse_PaymentId");

                    b.HasIndex(new[] { "RefundId" }, "IX_GatewayResponse_RefundId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_GatewayResponse_TransactionId");

                    b.ToTable("GatewayResponses");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserPaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentMethodTypeId");

                    b.HasIndex("UserPaymentMethodId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Payment_OrderId");

                    b.HasIndex(new[] { "PaymentStatusId" }, "IX_Payment_PaymentStatusId");

                    b.HasIndex(new[] { "UserId" }, "IX_Payment_UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Refund", b =>
                {
                    b.Property<Guid>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InitiatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RefundMethodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RefundStatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RefundTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RefundId");

                    b.HasIndex("RefundMethodTypeId");

                    b.HasIndex("RefundTransactionId");

                    b.HasIndex(new[] { "PaymentId" }, "IX_Refund_PaymentId");

                    b.HasIndex(new[] { "RefundStatusId" }, "IX_Refund_RefundStatusId");

                    b.HasIndex(new[] { "PaymentTransactionId" }, "IX_Refund_TransactionId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GatewayTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentProviderConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("RefundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("PaymentProviderConfigurationId");

                    b.HasIndex("RefundId");

                    b.HasIndex(new[] { "PaymentId" }, "IX_Transaction_PaymentId");

                    b.HasIndex(new[] { "TransactionStatusId" }, "IX_Transaction_TransactionStatusId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.UserPaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpiryMonth")
                        .HasColumnType("int");

                    b.Property<int?>("ExpiryYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaskedDetails")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MethodTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "MethodTypeId" }, "IX_PaymentMethod_MethodTypeId");

                    b.HasIndex(new[] { "UserId" }, "IX_PaymentMethod_UserId");

                    b.ToTable("UserPaymentMethods");
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.EnvironmentMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Environments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sandbox environment for testing",
                            IsActive = true,
                            Name = "Sandbox",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Production live environment",
                            IsActive = true,
                            Name = "Live",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "User Acceptance testing environment",
                            IsActive = true,
                            Name = "UAT",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.GatewayProviderMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GatewayProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Razorpay payment gateway",
                            IsActive = true,
                            Name = "Razorpay",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Stripe payment gateway",
                            IsActive = true,
                            Name = "Stripe",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Paytm payment gateway",
                            IsActive = true,
                            Name = "Paytm",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Other payment gateway",
                            IsActive = true,
                            Name = "Other",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.PaymentMethodTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "CreditCard",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "DebitCard",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "UPI",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Wallet",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "COD",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "NetBanking",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.PaymentProviderConfigurationMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApiSecret")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndpointUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("GatewayProviderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebhookUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EnvironmentId" }, "IX_PaymentConfiguration_EnvironmentId");

                    b.HasIndex(new[] { "GatewayProviderId" }, "IX_PaymentConfiguration_GatewayProviderId");

                    b.ToTable("PaymentProviderConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = "rzp_test_sandbox_key",
                            ApiSecret = "rzp_test_sandbox_secret",
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndpointUrl = "https://api.razorpay.com/v1/",
                            EnvironmentId = 1,
                            GatewayProviderId = 1,
                            IsActive = true,
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            WebhookUrl = "https://yourdomain.com/api/webhook/razorpay"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = "rzp_live_production_key",
                            ApiSecret = "rzp_live_production_secret",
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndpointUrl = "https://api.razorpay.com/v1/",
                            EnvironmentId = 2,
                            GatewayProviderId = 1,
                            IsActive = true,
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            WebhookUrl = "https://yourdomain.com/api/webhook/razorpay"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = "sk_test_sandbox_key",
                            ApiSecret = "sk_test_sandbox_secret",
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndpointUrl = "https://api.stripe.com/v1/",
                            EnvironmentId = 1,
                            GatewayProviderId = 2,
                            IsActive = true,
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            WebhookUrl = "https://yourdomain.com/api/webhook/stripe"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = "sk_live_production_key",
                            ApiSecret = "sk_live_production_secret",
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndpointUrl = "https://api.stripe.com/v1/",
                            EnvironmentId = 2,
                            GatewayProviderId = 2,
                            IsActive = true,
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            WebhookUrl = "https://yourdomain.com/api/webhook/stripe"
                        },
                        new
                        {
                            Id = 5,
                            ApiKey = "paytm_test_sandbox_key",
                            ApiSecret = "paytm_test_sandbox_secret",
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndpointUrl = "https://secure.paytm.in/",
                            EnvironmentId = 1,
                            GatewayProviderId = 3,
                            IsActive = true,
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            WebhookUrl = "https://yourdomain.com/api/webhook/paytm"
                        },
                        new
                        {
                            Id = 6,
                            ApiKey = "paytm_live_production_key",
                            ApiSecret = "paytm_live_production_secret",
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndpointUrl = "https://secure.paytm.in/",
                            EnvironmentId = 2,
                            GatewayProviderId = 3,
                            IsActive = true,
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            WebhookUrl = "https://yourdomain.com/api/webhook/paytm"
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.PaymentStatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Pending",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Completed",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Failed",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Canceled",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.RefundMethodTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RefundMethodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Original",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Wallet",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "BankTransfer",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Cash",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.RefundStatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RefundStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Pending",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Completed",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Failed",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Rejected",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.TransactionStatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Pending",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Success",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Failed",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Canceled",
                            UpdatedOn = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.GatewayResponse", b =>
                {
                    b.HasOne("PaymentService.Domain.Entities.Payment", "Payment")
                        .WithMany("GatewayResponses")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentService.Domain.Entities.Refund", "Refund")
                        .WithMany("GatewayResponses")
                        .HasForeignKey("RefundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentService.Domain.Entities.Transaction", "Transaction")
                        .WithMany("GatewayResponses")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Refund");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Payment", b =>
                {
                    b.HasOne("PaymentService.Domain.MasterEntities.PaymentMethodTypeMaster", "PaymentMethodTypeMaster")
                        .WithMany()
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.MasterEntities.PaymentStatusMaster", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.Entities.UserPaymentMethod", "UserPaymentMethod")
                        .WithMany()
                        .HasForeignKey("UserPaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PaymentMethodTypeMaster");

                    b.Navigation("PaymentStatus");

                    b.Navigation("UserPaymentMethod");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Refund", b =>
                {
                    b.HasOne("PaymentService.Domain.Entities.Payment", "Payment")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("PaymentTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentService.Domain.MasterEntities.RefundMethodTypeMaster", "RefundMethodTypeMaster")
                        .WithMany()
                        .HasForeignKey("RefundMethodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.MasterEntities.RefundStatusMaster", "RefundStatus")
                        .WithMany()
                        .HasForeignKey("RefundStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.Entities.Transaction", "RefundTransaction")
                        .WithMany()
                        .HasForeignKey("RefundTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Payment");

                    b.Navigation("RefundMethodTypeMaster");

                    b.Navigation("RefundStatus");

                    b.Navigation("RefundTransaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PaymentService.Domain.Entities.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentService.Domain.MasterEntities.PaymentProviderConfigurationMaster", "PaymentProviderConfigurationMaster")
                        .WithMany()
                        .HasForeignKey("PaymentProviderConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.Entities.Refund", "Refund")
                        .WithMany("Transactions")
                        .HasForeignKey("RefundId");

                    b.HasOne("PaymentService.Domain.MasterEntities.TransactionStatusMaster", "TransactionStatus")
                        .WithMany()
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentProviderConfigurationMaster");

                    b.Navigation("Refund");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.UserPaymentMethod", b =>
                {
                    b.HasOne("PaymentService.Domain.MasterEntities.PaymentMethodTypeMaster", "MethodType")
                        .WithMany()
                        .HasForeignKey("MethodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MethodType");
                });

            modelBuilder.Entity("PaymentService.Domain.MasterEntities.PaymentProviderConfigurationMaster", b =>
                {
                    b.HasOne("PaymentService.Domain.MasterEntities.EnvironmentMaster", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.MasterEntities.GatewayProviderMaster", "GatewayProvider")
                        .WithMany()
                        .HasForeignKey("GatewayProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("GatewayProvider");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Payment", b =>
                {
                    b.Navigation("GatewayResponses");

                    b.Navigation("Refunds");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Refund", b =>
                {
                    b.Navigation("GatewayResponses");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PaymentService.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("GatewayResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
