// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductService.Infrastructure.Persistence;

#nullable disable

namespace ProductService.Infrastructure.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    partial class ProductDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductService.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c2e1d5-4f3b-4a96-82d3-1a234567890a"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Electronic devices and gadgets",
                            IsActive = true,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("d7f8e3c4-6a7b-4a12-9c9f-2b3456789abc"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Smartphones and mobile devices",
                            IsActive = true,
                            Name = "Mobile Phones",
                            ParentCategoryId = new Guid("b1c2e1d5-4f3b-4a96-82d3-1a234567890a")
                        });
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-1234-5678-9abc-def012345678"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "15% off on Wireless Headphones Pro",
                            DiscountPercentage = 15m,
                            EndDate = new DateTime(2025, 7, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Summer Sale 15% OFF",
                            ProductId = new Guid("e2f3d4c5-7a8b-4b23-8d9e-3c456789abcd"),
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-2345-6789-abcd-ef0123456789"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Flat $50 off on Super Smartphone X1",
                            DiscountAmount = 50m,
                            DiscountPercentage = 0m,
                            EndDate = new DateTime(2025, 8, 15, 23, 59, 59, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Special Offer $50 OFF",
                            ProductId = new Guid("a4b5c6d7-9c0d-4d45-af10-5e6789abcdef"),
                            StartDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2f3d4c5-7a8b-4b23-8d9e-3c456789abcd"),
                            CategoryId = new Guid("b1c2e1d5-4f3b-4a96-82d3-1a234567890a"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Noise-cancelling wireless headphones",
                            IsActive = true,
                            Name = "Wireless Headphones Pro",
                            Price = 199.99m,
                            SKU = "ELE-WIR-2025-BCDE",
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = new Guid("f3a4b5c6-8b9c-4c34-9e0f-4d56789abcde"),
                            CategoryId = new Guid("b1c2e1d5-4f3b-4a96-82d3-1a234567890a"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "55 inch 4K UHD Smart TV",
                            IsActive = true,
                            Name = "Smart TV 55 inch",
                            Price = 799.99m,
                            SKU = "ELE-SMA-2025-BCDE",
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = new Guid("a4b5c6d7-9c0d-4d45-af10-5e6789abcdef"),
                            CategoryId = new Guid("d7f8e3c4-6a7b-4a12-9c9f-2b3456789abc"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Latest Super Smartphone X1 with OLED display",
                            IsActive = true,
                            Name = "Super Smartphone X1",
                            Price = 699.99m,
                            SKU = "MOB-SUP-2025-BCDE",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("b5c6d7e8-ad1e-4e56-bf21-6f789abcdef0"),
                            CategoryId = new Guid("d7f8e3c4-6a7b-4a12-9c9f-2b3456789abc"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Affordable smartphone with great features",
                            IsActive = true,
                            Name = "Budget Smartphone Z5",
                            Price = 149.99m,
                            SKU = "MOB-BUD-2025-BCDE",
                            StockQuantity = 200
                        });
                });

            modelBuilder.Entity("ProductService.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6d7e8f9-be2f-4f67-c032-789abcdef012"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "https://example.com/images/headphones_pro.jpg",
                            IsPrimary = true,
                            ProductId = new Guid("e2f3d4c5-7a8b-4b23-8d9e-3c456789abcd")
                        },
                        new
                        {
                            Id = new Guid("d7e8f901-cf30-5068-d143-89abcdef0123"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "https://example.com/images/smart_tv_55.jpg",
                            IsPrimary = true,
                            ProductId = new Guid("f3a4b5c6-8b9c-4c34-9e0f-4d56789abcde")
                        },
                        new
                        {
                            Id = new Guid("e8f901a2-d041-6179-e254-9abcdef01234"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "https://example.com/images/smartphone_x1_front.jpg",
                            IsPrimary = true,
                            ProductId = new Guid("a4b5c6d7-9c0d-4d45-af10-5e6789abcdef")
                        },
                        new
                        {
                            Id = new Guid("f901a2b3-e152-728a-f365-abcedf012345"),
                            CreatedOn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "https://example.com/images/budget_smartphone_z5.jpg",
                            IsPrimary = true,
                            ProductId = new Guid("b5c6d7e8-ad1e-4e56-bf21-6f789abcdef0")
                        });
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Category", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Discount", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Product", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Review", b =>
                {
                    b.HasOne("ProductService.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ProductService.Domain.Entities.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
